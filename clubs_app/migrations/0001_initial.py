# Generated by Django 5.0.2 on 2024-02-09 07:54

import ckeditor.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Campus',
            fields=[
                ('campus_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('campus', models.CharField(max_length=255, unique=True)),
                ('campus_navbar', models.CharField(max_length=255, unique=True)),
                ('navbar_display', models.BooleanField(default=True)),
                ('campus_priority', models.IntegerField(unique=True)),
                ('campus_permalink', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('department', models.CharField(max_length=255, unique=True)),
                ('department_navbar', models.CharField(max_length=255, unique=True)),
                ('navbar_display', models.BooleanField(default=True)),
                ('department_priority', models.IntegerField(unique=True)),
                ('department_permalink', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('tag', models.CharField(max_length=100, unique=True)),
                ('tag_navbar', models.CharField(max_length=255, unique=True)),
                ('navbar_display', models.BooleanField(default=True)),
                ('tag_priority', models.IntegerField(unique=True)),
                ('tag_permalink', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClubUser',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('username', models.EmailField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('club_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('permalink', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('about', ckeditor.fields.RichTextField(blank=True)),
                ('ribbon', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('founded_on', models.DateField()),
                ('background_color', models.CharField(max_length=255)),
                ('likes', models.IntegerField(default=1)),
                ('views', models.IntegerField(default=1)),
                ('club_image', models.ImageField(blank=True, upload_to='clubs/uploads/')),
                ('publish', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campus', models.ManyToManyField(blank=True, to='clubs_app.campus')),
                ('department', models.ManyToManyField(blank=True, to='clubs_app.department')),
                ('tag', models.ManyToManyField(blank=True, to='clubs_app.tag')),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('award_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('award_name', models.CharField(max_length=255)),
                ('award_image', models.ImageField(blank=True, upload_to='clubs/uploads/')),
                ('compitation_name', models.CharField(blank=True, max_length=255, null=True)),
                ('organizer', models.CharField(blank=True, max_length=255, null=True)),
                ('year', models.CharField(blank=True, max_length=4, null=True, validators=[django.core.validators.RegexValidator('^\\d{4}$')])),
                ('external_link', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs_app.club')),
            ],
            options={
                'ordering': ['-year', 'award_name'],
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('member_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('member_name', models.CharField(max_length=255)),
                ('pesu_register_no', models.CharField(blank=True, max_length=255, null=True)),
                ('member_pic', models.ImageField(blank=True, upload_to='clubs/uploads/')),
                ('student_co', models.BooleanField(default=False)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('member_contact', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('^\\d{10}$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs_app.club')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='clubs_app.department')),
            ],
            options={
                'ordering': ['-student_co', 'member_name'],
            },
        ),
        migrations.CreateModel(
            name='ResetPassword',
            fields=[
                ('reset_password_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('forget_password_token', models.CharField(max_length=255)),
                ('forget_password_token_created_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('social_media_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('facebook', models.CharField(blank=True, max_length=255)),
                ('youtube', models.CharField(blank=True, max_length=255)),
                ('x', models.CharField(blank=True, max_length=255)),
                ('instagram', models.CharField(blank=True, max_length=255)),
                ('website', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs_app.club')),
            ],
        ),
        migrations.CreateModel(
            name='StaffCordinate',
            fields=[
                ('staff_cordinate_id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('staff_name', models.CharField(max_length=255)),
                ('staff_pic_url', models.CharField(blank=True, max_length=255, null=True)),
                ('staff_url', models.CharField(blank=True, max_length=255, null=True)),
                ('staff_designation', models.CharField(blank=True, max_length=255, null=True)),
                ('staff_phone', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator('^\\d{10}$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clubs_app.club')),
            ],
        ),
    ]
